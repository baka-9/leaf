import{_ as e,c as a,o as s,a as l}from"./app.6fababfc.js";const g=JSON.parse('{"title":"Docker部署","description":"","frontmatter":{},"headers":[{"level":2,"title":"后端部署","slug":"后端部署","link":"#后端部署","children":[{"level":3,"title":"1.配置后端文件","slug":"_1-配置后端文件","link":"#_1-配置后端文件","children":[]},{"level":3,"title":"2.构建","slug":"_2-构建","link":"#_2-构建","children":[]},{"level":3,"title":"3.启动后端","slug":"_3-启动后端","link":"#_3-启动后端","children":[]}]},{"level":2,"title":"前端部署","slug":"前端部署","link":"#前端部署","children":[{"level":3,"title":"1.配置后端文件","slug":"_1-配置后端文件-1","link":"#_1-配置后端文件-1","children":[]},{"level":3,"title":"2.构建","slug":"_2-构建-1","link":"#_2-构建-1","children":[]},{"level":3,"title":"3.启动前端","slug":"_3-启动前端","link":"#_3-启动前端","children":[]}]}],"relativePath":"guide/docker.md"}'),n={name:"guide/docker.md"},c=l(`<h1 id="docker部署" tabindex="-1">Docker部署 <a class="header-anchor" href="#docker部署" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在使用docker安装之前，需要安装好docker,docker-compose</p></div><h2 id="后端部署" tabindex="-1">后端部署 <a class="header-anchor" href="#后端部署" aria-hidden="true">#</a></h2><h3 id="_1-配置后端文件" tabindex="-1">1.配置后端文件 <a class="header-anchor" href="#_1-配置后端文件" aria-hidden="true">#</a></h3><p>打开 <code>data/config/application.yml</code>文件，根据其中的注释修改配置文件并保存</p><h3 id="_2-构建" tabindex="-1">2.构建 <a class="header-anchor" href="#_2-构建" aria-hidden="true">#</a></h3><p>执行以下命令</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">docker-compose build</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="_3-启动后端" tabindex="-1">3.启动后端 <a class="header-anchor" href="#_3-启动后端" aria-hidden="true">#</a></h3><p>执行以下命令</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">docker-compose up -d</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>如需停止项目执行</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">docker-compose stop </span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="前端部署" tabindex="-1">前端部署 <a class="header-anchor" href="#前端部署" aria-hidden="true">#</a></h2><div class="warning custom-block"><p class="custom-block-title">提示</p><p>目前的部署方式不建议使用docker部署前端，建议直接跳转到<a href="/guide/domain.html#未部署前端">域名配置</a>完成前端的部署</p></div><h3 id="_1-配置后端文件-1" tabindex="-1">1.配置后端文件 <a class="header-anchor" href="#_1-配置后端文件-1" aria-hidden="true">#</a></h3><p>打开 <code>web\\utils\\src\\global-config.ts</code>文件，修改<code>domain</code>为后端域名</p><p><strong>注意：仅域名不包含http、斜线、反斜线等内容，没有域名可以使用可以为ip:端口</strong></p><h3 id="_2-构建-1" tabindex="-1">2.构建 <a class="header-anchor" href="#_2-构建-1" aria-hidden="true">#</a></h3><p>docker构建提供了两种构建方式，docker打包+部署内包含了前端项目的构建，但是对服务器性能要求较高， docker仅部署对服务器要求相对低，但需要手动打包前端</p><h4 id="_2-1-使用docker打包-部署" tabindex="-1">2.1 使用docker打包+部署 <a class="header-anchor" href="#_2-1-使用docker打包-部署" aria-hidden="true">#</a></h4><p>进入web目录执行以下命令</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">docker build -f Dockerfile-build -t &quot;leaf-web&quot; .</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h4 id="_2-2-使用docker仅部署" tabindex="-1">2.2 使用docker仅部署 <a class="header-anchor" href="#_2-2-使用docker仅部署" aria-hidden="true">#</a></h4><ol><li>在构建之前需要先对前端项目进行打包，首先要先安装nodejs和pnpm，然后进入<code>web</code>目录，执行</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">pnpm i</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><ol start="2"><li>在<code>web</code>目录中创建<code>dist</code>文件夹</li><li>进入<code>web\\packages\\web-client</code>执行命令<code>pnpm run build</code> 将产生的<code>web</code>文件夹复制到<code>dist</code></li><li>进入<code>web\\packages\\manage-client</code>执行命令<code>pnpm run build</code> 将产生的<code>manage</code>文件夹复制到<code>dist</code></li><li>进入<code>web\\packages\\mobile-client</code>执行命令<code>pnpm run build</code> 将产生的<code>mobile</code>文件夹复制到<code>dist</code></li><li>在<code>web</code>目录下执行以下命令</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">docker build -t &quot;leaf-web&quot; .</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="_3-启动前端" tabindex="-1">3.启动前端 <a class="header-anchor" href="#_3-启动前端" aria-hidden="true">#</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">docker run -itd --name leafWeb -p 9090:9090 &quot;leaf-web&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>如需停止项目执行</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">docker stop leafWeb</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div>`,32),o=[c];function d(i,t,p,r,h,u){return s(),a("div",null,o)}const _=e(n,[["render",d]]);export{g as __pageData,_ as default};
